[[https://github.com/magicbug/Cloudlog][Cloudlog]] + utilities packaged for [[https://nixos.org][NixOS]].

* Flake
 This flake exposes an overlay containing the required packages as well as the modules listed below. For convenience, an extra module named ~all~ includes all the other modules.

* Modules
** [[https://github.com/magicbug/Cloudlog][Cloudlog]]
#+BEGIN_QUOTE
 Web based amateur radio logging application built using PHP & MySQL supports general station logging tasks from HF to Microwave with supporting applications to support CAT control. 
#+END_QUOTE

With automatic MySQL provisioning:
#+BEGIN_SRC nix
{
  services = {
    cloudlog = {
      enable = true;
      # This causes the flake to provision a MySQL database using PAM
      # authentication
      mysql.enable = true;
      config = {
        base_url = "http://localhost/cloudlog";
        cloudlog_option = value;
        ... = ...;
      };
    };
    # Any of the available MySQL packages should work
    mysql.package = pkgs.mariadb;
  };
}
#+END_SRC

With your existing MySQL database:

#+BEGIN_SRC nix
{
  services = {
    cloudlog = {
      enable = true;
      config = { ... };
      mysql = {
        enable = false;
        hostname = "mysql.local";
        database = "cloudlog";
        username = "cloudlog";
        password = "secret";
        # This option might be useful if you have a secrets manager
        # passwordFile = "/run/secrets/cloudlog";
      };
    };
  };
}
#+END_SRC

** cloudlog-lotw-sync
This is a simple cronjob-style job that triggers Cloudlog to syncronise with [[https://lotw.arrl.org/lotwuser/default][ARRL's LogBook Of The World]].

#+BEGIN_SRC nix
{
  services.cloudlog-lotwsync = {
    enable = true;
    url = "http://localhost/cloudlog";
    schedule = "*-*-* 00/3:00:00";
  };
}
#+END_SRC

** [[https://github.com/Manawyrm/cloudlog-rigctl-interface][cloudlog-rigtctl-interface]]
#+BEGIN_QUOTE
Connects Cloudlog to rigctld / hamlib via PHP. This allows you to automatically log the used frequency and mode in Cloudlog's Live QSO menu.
#+END_QUOTE

#+BEGIN_SRC nix
{
  services.cloudlog-rigctl-interface = {
    rigctl = {
      host = "localhost";
      port = 4532;
    };
    cloudlog = {
      url = "http://localhost/cloudlog";
      key = "/run/secrets/cloudlog";
    };
    radio = "Radio Name";
  };
}
#+END_SRC

** [[https://github.com/illdefined/cloudlog-adifwatch][cloudlog-adifwatch]]
#+BEGIN_QUOTE
This tool watches an ADIF log file for changes using the native filesystem notification mechanism and uploads it to a Cloudlog instance through the QSO API.
#+END_QUOTE

#+BEGIN_SRC nix
{
  services.cloudlog-adifwatch = {
    enable = true;
    key = "/run/secrets/cloudlog";
    host = "http://localhost/cloudlog";
    watchers = {
      wsjtx = "/path/to/wsjtx/adif";
      fldigi = "/path/to/fldigi/adif";
      js8call = "/path/to/js8call/adif"
      ... = ...;
    };
  };
}
#+END_SRC
